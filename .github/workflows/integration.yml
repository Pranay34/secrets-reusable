---
name: Terraform for Aws
# https://github.com/hashicorp/setup-terraform#usage

on:
  workflow_call:
    inputs:
      version:
        description: Version of Terraform to use
        type: string
        default: 1.4.4
      working-directory:
        description: Directory in which to run Terraform commands and operations
        type: string
        default: ./
      state:
        description: 'Select a state storage option: local, cloud, s3'
        type: string
        default: local
      format:
        description: Trigger workflow to run 'terraform fmt -check' command
        type: boolean
        default: false
      validate:
        description: Trigger workflow to run 'terraform validate -no-color' command
        type: boolean
        default: true
      plan:
        description: Trigger workflow to run 'terraform plan -no-color -input=false' command
        type: boolean
        default: true
      apply:
        description: Trigger workflow to run 'terraform apply' command
        type: boolean
        default: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DEFAULT_REGION:
        required: true

permissions:
  contents: read
  pull-requests: write

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        if: inputs.state == 'local' || inputs.state == 's3'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.version }}

      - name: Terraform Format
        id: fmt
        if: inputs.format == true
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        if: inputs.validate == true
        run: terraform validate -no-color

      - name: Terraform Validation Output Summary
        id: validation_summary
        if: inputs.validate == true
        run: |
          echo "### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.validate.outputs.stdout }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        # if: github.event_name == 'pull_request'
        if: inputs.plan == true
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Plan Output Summary
        id: plan_summary
        if: inputs.plan == true
        run: |
          echo "### Terraform Plan 📖\`${{ steps.plan.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.plan.outputs.stdout }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: |
          echo "### Terraform Plan Errors" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.plan.outputs.stderr }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          exit 1
      - name: Terraform Apply
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        if: inputs.apply == true
        run: terraform apply -auto-approve -input=false